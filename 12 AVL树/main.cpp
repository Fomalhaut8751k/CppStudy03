#include<iostream>

/*
	二叉搜索平衡树：BST树+结点平衡操作(平衡：任意结点左右子树的高度差不超过1)
	AVL树为了维护结点平衡引入的四种结点旋转操作

	结点失衡的原因：
	1. 左孩子的左子树太高了(右旋转操作)
				  40(失衡节点)
			 30
		  20    35
	  向右旋转
			 30
		 20      40
		       35
		操作：a) 30成为根结点，记录30的右子树
			  b) 30原本的右子树放到40的左节点上
			  c) 40成为30的右节点

	2. 右孩子的右子树太高了(左旋转操作)
		  40(失衡节点)
		      50
		    45    60
		向左旋转
			  50
		  40      60
			45
		操作：a) 50变为根节点
		      b) 50原来的左子树挂在40的右节点上
			  c) 40成为50的左节点

	3. 左孩子的右子树太高了(左-右旋转，左平衡操作)
			40(失衡节点)
		20
		  30
	   先处理成情况1
	   以20为根结点进行【左旋】
			40
		  30
	    20
	   操作：a) 30变为"根节点"，变成40的左孩子
			 b) 30的左子树挂在20的右节点上，但是30没有左子树，所以不管
			 c) 20成为30的左节点
	   然后执行情况1的右旋

	4. 右孩子的左子树太高了(右-左旋转，右平衡操作)
			40(失衡节点)
				 60
			  50
	   先处理成情况2
	   以60为根结点进行【右旋】

	   操作：a) 50变成"根节点"，变成40的右孩子
			 b) 60的右子树挂在50的左节点上，但是60没有右子树，所以不管
			 c) 60变成50的右节点
	   然后执行情况2的左旋
*/

using namespace std;

int main()
{




	return 0;
}